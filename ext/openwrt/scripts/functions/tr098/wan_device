#!/bin/sh
# Copyright (C) 2015 PIVA Software <www.pivasoftware.com>
# 	Author: MOHAMED Kallel <mohamed.kallel@pivasoftware.com>

. /lib//functions/network.sh

#############################
#   Entry point functuons   #
#############################

prefix_list="$prefix_list $DMROOT.WANDevice."
entry_execute_method_list="$entry_execute_method_list entry_execute_method_root_WANDevice"
entry_execute_method_list_forcedinform="$entry_execute_method_list_forcedinform entry_execute_method_root_WANDevice"

entry_execute_method_root_WANDevice() {
	case "$1" in ""|"$DMROOT."|"$DMROOT.WANDevice."*)
		common_execute_method_obj "$DMROOT.WANDevice." "0"
		common_execute_method_obj "$DMROOT.WANDevice.1." "0"
		common_execute_method_obj "$DMROOT.WANDevice.1.WANCommonInterfaceConfig." "0"
		common_execute_method_param "$DMROOT.WANDevice.1.WANCommonInterfaceConfig.EnabledForInternet" "1" "wan_device_get_comconfig_enable" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANCommonInterfaceConfig.WANAccessType" "0" "wan_device_get_comconfig_accesstype" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANCommonInterfaceConfig.Layer1UpstreamMaxBitRate" "0" "wan_device_get_comconfig_uprate" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANCommonInterfaceConfig.Layer1DownstreamMaxBitRate" "0" "wan_device_get_comconfig_downrate" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANCommonInterfaceConfig.PhysicalLinkStatus" "0" "wan_device_get_comconfig_phystatus" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANCommonInterfaceConfig.TotalPacketsSent" "0" "wan_device_get_comconfig_packetsent" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANCommonInterfaceConfig.TotalPacketsReceived" "0" "wan_device_get_comconfig_packetrecv" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANCommonInterfaceConfig.TotalBytesSent" "0" "wan_device_get_comconfig_bytesent" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANCommonInterfaceConfig.TotalBytesReceived" "0" "wan_device_get_comconfig_bytesrecv" ""


		common_execute_method_obj "$DMROOT.WANDevice.1.WANEthernetInterfaceConfig." "0"
		common_execute_method_param "$DMROOT.WANDevice.1.WANEthernetInterfaceConfig.Enable" "1" "wan_device_get_ethconfig_enable" "wan_device_set_ethconfig_enable"
		common_execute_method_param "$DMROOT.WANDevice.1.WANEthernetInterfaceConfig.Status" "0" "wan_device_get_ethconfig_status"
		common_execute_method_param "$DMROOT.WANDevice.1.WANEthernetInterfaceConfig.MACAddress" "0" "wan_device_get_ethconfig_mac"
		common_execute_method_param "$DMROOT.WANDevice.1.WANEthernetInterfaceConfig.MaxBitRate" "1" "wan_device_get_ethconfig_maxbitrate"
		common_execute_method_param "$DMROOT.WANDevice.1.WANEthernetInterfaceConfig.DuplexMode" "1" "wan_device_get_ethconfig_duplexmode"

		common_execute_method_obj "$DMROOT.WANDevice.1.WANEthernetInterfaceConfig.Stats." "0"
		common_execute_method_param "$DMROOT.WANDevice.1.WANEthernetInterfaceConfig.Stats.BytesSent" "0"  "wan_device_get_ethstats_bytessent"
		common_execute_method_param "$DMROOT.WANDevice.1.WANEthernetInterfaceConfig.Stats.BytesReceived" "0"  "wan_device_get_ethstats_bytesrecv"
		common_execute_method_param "$DMROOT.WANDevice.1.WANEthernetInterfaceConfig.Stats.PacketsSent" "0"  "wan_device_get_ethstats_packssent"
		common_execute_method_param "$DMROOT.WANDevice.1.WANEthernetInterfaceConfig.Stats.PacketsReceived" "0"  "wan_device_get_ethstats_packsrecv"

		common_execute_method_obj "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig." "0"
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Status" "0" "wan_device_get_ponStatus" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.TXPower" "0" "wan_device_get_ponTXPower" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.RXPower" "0" "wan_device_get_ponRXPower" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.TransceiverTemperature" "0" "wan_device_get_ponTransceiverTemperature" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.SupplyVottage" "0" "wan_device_get_ponSupplyVottage" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.BiasCurrent" "0" "wan_device_get_ponBiasCurrent" ""
		common_execute_method_obj "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats." "0"
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.BytesSent" "0" "wan_device_get_ponStatsBytesSent" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.BytesReceived" "0" "wan_device_get_ponStatsBytesReceived" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.PacketsSent" "0" "wan_device_get_ponStatsPacketsSent" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.PacketsReceived" "0" "wan_device_get_ponStatsPacketsReceived" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.SUnicastPackets" "0" "wan_device_get_ponStatsSUnicastPackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.RUnicastPackets" "0" "wan_device_get_ponStatsRUnicastPackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.SMulticastPackets" "0" "wan_device_get_ponStatsSMulticastPackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.RMulticastPackets" "0" "wan_device_get_ponStatsRMulticastPackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.SBroadcastPackets" "0" "wan_device_get_ponStatsSBroadcastPackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.RBroadcastPackets" "0" "wan_device_get_ponStatsRBroadcastPackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.FECError" "0" "wan_device_get_ponStatsFECError" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.HECError" "0" "wan_device_get_ponStatsHECError" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.DropPackets" "0" "wan_device_get_ponStatsDropPacketst" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.SPausePackets" "0" "wan_device_get_ponStatsSPausePackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_GponInterfaceConfig.Stats.RPausePackets" "0" "wan_device_get_ponStatsRPausePackets" ""

		common_execute_method_obj "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig." "0"
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Status" "0" "wan_device_get_ponStatus" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.TXPower" "0" "wan_device_get_ponTXPower" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.RXPower" "0" "wan_device_get_ponRXPower" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.TransceiverTemperature" "0" "wan_device_get_ponTransceiverTemperature" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.SupplyVottage" "0" "wan_device_get_ponSupplyVottage" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.BiasCurrent" "0" "wan_device_get_ponBiasCurrent" ""
		common_execute_method_obj "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats." "0"
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.BytesSent" "0" "wan_device_get_ponStatsBytesSent" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.BytesReceived" "0" "wan_device_get_ponStatsBytesReceived" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.PacketsSent" "0" "wan_device_get_ponStatsPacketsSent" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.PacketsReceived" "0" "wan_device_get_ponStatsPacketsReceived" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.SUnicastPackets" "0" "wan_device_get_ponStatsSUnicastPackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.RUnicastPackets" "0" "wan_device_get_ponStatsRUnicastPackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.SMulticastPackets" "0" "wan_device_get_ponStatsSMulticastPackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.RMulticastPackets" "0" "wan_device_get_ponStatsRMulticastPackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.SBroadcastPackets" "0" "wan_device_get_ponStatsSBroadcastPackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.RBroadcastPackets" "0" "wan_device_get_ponStatsRBroadcastPackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.FECError" "0" "wan_device_get_ponStatsFECError" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.HECError" "0" "wan_device_get_ponStatsHECError" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.DropPackets" "0" "wan_device_get_ponStatsDropPacketst" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.SPausePackets" "0" "wan_device_get_ponStatsSPausePackets" ""
		common_execute_method_param "$DMROOT.WANDevice.1.X_CT-COM_EponInterfaceConfig.Stats.RPausePackets" "0" "wan_device_get_ponStatsRPausePackets" ""
		
		common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice." "1" "wan_device_add_instances_wancxdev $1" "" "wan_device_browse_instances_wancxdev $1"
		return 0
		;;
	esac
	return $E_INVALID_PARAMETER_NAME;
}

sub_entry_wandevice_wanconnectiondevice() {
	local j="$2"
	local iface="$3"
	local protocol="$4"
	local default="$5"
	case_param "$1" belongto "$DMROOT.WANDevice.1.WANConnectionDevice.$j." && {
		common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j." "1"  "" "wan_device_del_instances_wancxdev $iface" 
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnectionNumberOfEntries" "0" "wan_device_get_WANIPConnectionNumberOfEntries $iface" "" " xsd:unsignedInt"
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANPPPConnectionNumberOfEntries" "0" "wan_device_get_WANPPPConnectionNumberOfEntries $iface" "" " xsd:unsignedInt"
		common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANEthernetLinkConfig." "0" 
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANEthernetLinkConfig.EthernetLinkStatus" "0" "wan_device_get_ethstatus $iface" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANEthernetLinkConfig.X_CT-COM_VLANIDMark" "1" "wan_device_get_ethVLANID $iface" "wan_device_set_ethVLANID $iface"
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANEthernetLinkConfig.X_CT-COM_802-1pMark" "1" "" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANEthernetLinkConfig.X_CT-COM_Mode" "1" "wan_device_get_ethVLANMODE $iface" "wan_device_set_ethVLANMODE $iface"

		common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANPONLinkConfig." "0" 
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANPONLinkConfig.Enable" "1" "wan_device_get_ipcx_enable $iface" "wan_device_set_ipcx_enable $iface"
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANPONLinkConfig.TCType" "0" "" ""

		common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANGponLinkConfig." "0" 
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANGponLinkConfig.Enable" "1" "" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANGponLinkConfig.X_CT-COM_VLANIDMark" "1" "wan_device_get_ethVLANID $iface" "wan_device_set_ethVLANID $iface"
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANGponLinkConfig.X_CT-COM_802-1pMark" "1" "" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANGponLinkConfig.X_CT-COM_Mode" "1" "wan_device_get_ethVLANMODE $iface" "wan_device_set_ethVLANMODE $iface"


		common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANEponLinkConfig." "0" 
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANEponLinkConfig.Enable" "1" "" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANEponLinkConfig.X_CT-COM_VLANIDMark" "1" "wan_device_get_ethVLANID $iface" "wan_device_set_ethVLANID $iface"
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANEponLinkConfig.X_CT-COM_802-1pMark" "1" "" ""
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.X_CT-COM_WANEponLinkConfig.X_CT-COM_Mode" "1" "wan_device_get_ethVLANMODE $iface" "wan_device_set_ethVLANMODE $iface"


		case $protocol in
			IP)
			common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection." "0"
			common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1." "0"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.Enable" "1" "wan_device_get_ipcx_enable $iface" "wan_device_set_ipcx_enable $iface"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.ConnectionStatus" "0" "wan_device_get_ipcx_status $iface"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.PossibleConnectionTypes" "0" "wan_device_get_ipcx_possible_contypes"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.ConnectionType" "1" "wan_device_get_ipcx_contypes $iface"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.Name" "1" "wan_device_get_ipcx_name $iface"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.RSIPAvailable" "0" "wan_device_get_ipcx_rsipavalilable"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.NATEnabled" "1" "wan_device_get_ipcx_natenable $iface" "wan_device_set_ipcx_natenable $iface"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.AddressingType" "1" "wan_device_get_ipcx_addrtype $iface" "wan_device_set_ipcx_addrtype $iface"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.ExternalIPAddress" "1" "wan_device_get_ipcx_ipaddr $iface" "wan_device_set_ipcx_ipaddr $iface" 
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.SubnetMask" "1" "wan_device_get_ipcx_subnetmask $iface" "wan_device_set_ipcx_subnetmask $iface" 
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.DefaultGateway" "1" "wan_device_get_ipcx_defaultgateway $iface" "wan_device_set_ipcx_defaultgateway $iface" 
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.DNSEnabled" "1" "wan_device_get_ipcx_dnsenabled" ""  
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.DNSServers" "1" "wan_device_get_ipcx_dnsservers $iface" ""  
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.MACAddress" "0" "wan_device_get_ipcx_macaddr $iface"

			common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.Stats." "0"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.Stats.EthernetBytesSent" "1" "wan_device_get_ipcx_ethbytessend $iface" ""
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.Stats.EthernetBytesReceived" "1" "wan_device_get_ipcx_ethbytesrecv $iface" ""
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.Stats.EthernetPacketsSent" "1" "wan_device_get_ipcx_ethpacketssend $iface" ""
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.Stats.EthernetPacketsReceived" "1" "wan_device_get_ipcx_ethpacketsrecv $iface" ""

			common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.PortMapping." "1" "add_portmap_instances" "" "browse_portmap_instances $1"
			
			;;
			PPP)
			common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANPPPConnection." "0"
			common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANPPPConnection.1." "0"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANPPPConnection.1.Enable" "1" "wan_device_get_wan_ppp_enable $iface" "wan_device_set_wan_ppp_enable $iface" "xsd:boolean"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANPPPConnection.1.Username" "1" "$UCI_GET network.$iface.username" "wan_device_set_wan_ppp_cfg network.$iface.username"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANPPPConnection.1.Password" "1" "$UCI_GET network.$iface.password" "wan_device_set_wan_ppp_cfg network.$iface.password"
			;;
		esac
		return 0
	}
	return $E_INVALID_PARAMETER_NAME;
}


wan_device_get_max_instances() {
wan_index=0
subwan_index=1
instances=0
local wan_iface=""
while [ $wan_index -le 2 ]
do
        if [ $wan_index = 0 ];then
          wan_iface="wan"
        else
           wan_iface="wan$wan_index"
        fi
        wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null

        if [ "$wan_proto" != "" ]; then
        {
             instances=$(($instances+1))
        }
        fi
        wan_index=$(($wan_index+1))
done

##subwan interface                     
while [ $subwan_index -le 8 ]   
do                                                                          
        wan_iface="subwan$subwan_index"         
        wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null

        if [ "$wan_proto" != "" ]; then
        {                  
             instances=$(($instances+1))
        }      
        fi
        subwan_index=$(($subwan_index+1))
done      
    echo  ${instances:-0}
}

#######################################
#     Data model add  instances     #
#######################################

wan_device_add_instances_wancxdev() {
    local cur_instances=`wan_device_get_max_instances`
    local subwan_index_max=8
    subwan_index=1

    if [ $((++cur_instances))  -ge $subwan_index_max];then                                         
        exit 0
    fi                             

    ##subwan interface                     
    while [ $subwan_index -lt $subwan_index_max ]   
    do                                                                                                                                 
            wan_iface="subwan$subwan_index"         
            wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null

            if [ "$wan_proto" == "" ]; then
            {                  
                 uci set network.$wan_iface="interface"
                 uci set network.$wan_iface.ifname="subwan$subwan_index"
                 uci set network.$wan_iface.proto="dhcp"
                 uci set network.$wan_iface.site="wan"
                 uci commit network
                 break
            }      
            fi
            subwan_index=$(($subwan_index+1))
    done

    if [ $((++cur_instances))  -lt $subwan_index_max];then                                         
        echo $((++cur_instances))              
    else                                                                
        echo $subwan_index_max
    fi                             
}

#######################################
#     Data model delete  instances     #
#######################################

wan_device_del_instances_wancxdev() {
	local iface="$1"
	uci delete network.$iface
	uci commit network
	return 0
}


#######################################
#     Data model browse instances     #
#######################################

wan_device_browse_instances_wancxdev() {
	local map maps=`wan_device_get_interface_maps` 
	for map in $maps; do
		local iface=${map%%:*}
		map=${map#*:}
		local j=${map%%:*}
		map=${map#*:}
		local protocol=${map%%:*}
		local default=${map#*:}
		sub_entry_wandevice_wanconnectiondevice "$1" "$j" "$iface" "$protocol" "$default"
	done
	return 0;
}

#######################################
#   Data model parameters functions   #
#######################################

wan_device_get_interface_maps() {
	#should return a list like this: "<interface1>:<instance1>:<protocol>:<default interface? 1 : 0> <interface2>:<instance>:<protocol>:<default interface? 1 : 0>"
wan_num=0
subwan_index=1
all_subwan=8
local wan_proto=""
local wanstring_last=""
local wanstring=""
local subwanstring_last=""
local subwanstring=""
local wan_iface=""
i=0
j=0

if false; then
while [ $wan_num -le 2 ]
do

        if [ $wan_num = 0 ];then
          wan_iface="wan"
        else
          wan_iface="wan$wan_num"
        fi
        wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null
        [ -z $wan_proto ] &&
        {
             wan_num=$(($wan_num+1))
             continue
        }||
        {
                i=$(($i+1))
                [ "$wan_proto" = "pppoe" ] &&
                {
                        wan_proto="PPP"
                } || {
                wan_proto="IP"
                }

                wanstring=$(echo $wanstring_last $wan_iface:$i:$wan_proto:0)
                        wanstring_last=$wanstring
                wan_num=$(($wan_num+1))
         }
done
fi
##subwan interface                     
while [ $subwan_index -le 8 ]   
do                                                                          
        wan_iface="subwan$subwan_index"                                             
        wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null
        [ -z $wan_proto ] &&
        {                  
             subwan_index=$(($subwan_index+1))
	     all_subwan=$(($all_subwan-1))
             continue              
        }||                        
        {                               
                i=$(($i+1))             
                 [ "$wan_proto" = "pppoe" ] &&                    
                {                                                 
                        wan_proto="PPP"                           
                } || {                                            
                wan_proto="IP"            
                }                         
                                          
                 #subwanstring=$(echo $wanstring $subwanstring_last $wan_iface:$i:$wan_proto:0)
                 subwanstring=$(echo $subwanstring_last $wan_iface:$i:$wan_proto:0)
                        subwanstring_last=$subwanstring
                subwan_index=$(($subwan_index+1)) 
        }                                     
done                                          
	if [ $all_subwan = "0" ];then
	 subwanstring=$wanstring
	fi
         echo $subwanstring            
}

wan_device_get_ipcx_status() {
        local val iface="$1"
        local up=$(uci -p /var/state get network.$iface.up)
	[ -z $up ] || 
	{
		[ $up = "1" ] && {
		echo "Connected"
		} || {
		echo "Disconnected"  
		}
	}
}

wan_device_get_ipcx_ipaddr() {
    local val=`uci get network.$1.ipaddr`
    echo ${val:-1}
}

wan_device_set_ipcx_ipaddr() {
    local wan_iface=$1
    uci set network.$wan_iface.ipaddr=$2
    uci commit network
}

wan_device_get_wan_ppp_enable() {
	local iface="$1"
	local val=`$UCI_GET network.$iface.auto`
	echo ${val:-1}
}

wan_device_set_wan_ppp_enable() {
        local iface="$1"
        local val="$2"
        local up
        local pid=$(ps www|grep pppd |grep $iface | awk '{print$1}')
        [ $val = "1" ] && {
	   $UCI_SET network.$iface.auto=1
          up=$(uci -p /var/state get network.$iface.up)
          if [ -z $up ];then
             /sbin/ifup $iface 2&>/dev/null
          elif [ $up = "0" ];then
                 /sbin/ifup $iface 2&>/dev/null
          fi
        } ||
        {
           /sbin/ifdown $iface 2&>/dev/null
	   $UCI_SET network.$iface.auto=0
        }

	return 0
}

wan_device_set_wan_ppp_cfg() {
	local cfg="$1"
	local val="$2"
	uci set $cfg=$val
	uci commit network
	return 0
}

wan_device_get_WANIPConnectionNumberOfEntries()
{
    local wan_iface=$1
    local wan_proto=""
    wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null
    [ "$wan_proto" = "pppoe" ] &&
    {
           echo 0
    } || {
           echo 1
    }
}

wan_device_get_WANPPPConnectionNumberOfEntries()
{
    local wan_iface=$1
    local wan_proto=""
    wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null
    [ "$wan_proto" = "pppoe" ] &&
    {
           echo 1
    } || {
           echo 0
    }
}

wan_device_get_ipcx_enable()
{
    local wan_iface=$1
    local wan_disabled=""
    wan_disabled=$(uci get network.$wan_iface.disabled) &> /dev/null
    if [ "$wan_disabled" = "1" ]; then
    {
           echo "0"
    } 
    elif [ "$wan_disabled" = "0" ]; then
    {
           echo "1"
    }   
    else
        return $E_INVALID_PARAMETER_VALUE
    fi
}

wan_device_set_ipcx_enable()
{
    local wan_iface=$1
    local val=$2
    if [ "$val" = "0" -o  "$val" = "false" ]; then
    {
           uci set network.$wan_iface.disabled="1"
           uci commit network
    } 
    elif [ "$val" = "1" -o "$val" = "true" ]; then
    {
           uci set network.$wan_iface.disabled="0"
           uci commit network
    }   
    else
        return $E_INVALID_PARAMETER_VALUE
    fi
    ifdown $wan_iface
    ifup $wan_iface
    return 0
}

wan_device_get_ipcx_possible_contypes()
{
    echo "IP_Routed,IP_Bridged"
}
wan_device_get_ipcx_contypes()
{
    local wan_iface=$1
    local wan_proto=""
    wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null
    [ "$wan_proto" = "relay" ] &&
    {
           echo "IP_Bridged"
    } || {
           echo "IP_Routed"
    }    
}

wan_device_get_ipcx_name()
{
    local wan_iface=$1
    local wan_ifname=""
    wan_ifname=$(uci get network.$wan_iface.ifname) &> /dev/null
    echo $wan_ifname
}

wan_device_get_ipcx_rsipavalilable()
{
    echo 0
}

wan_device_get_ipcx_natenable()
{
    local zone_index=0
    local if_name=$1
    local result=""
    local val=0
    while [ $zone_index -le 1 ]
    do
        zone_name=`uci get firewall.@zone[$zone_index].name`
        if [ "$zone_name" = "wan" ];then
        {
            zone_network=`uci get firewall.@zone[$zone_index].network`
            result=$(echo $zone_network | grep "${if_name}")
            if [[ "$result" != "" ]]
            then
                val=1
            else
                val=0
            fi
            break
        }
        fi
        zone_index=$(($zone_index+1))
    done
    echo $val
}

wan_device_set_ipcx_natenable()
{
    local if_name=$1
    local value=$2

    local zone_index=0
    local if_name=$1
    local result=""
    local new_network=""

    while [ $zone_index -le 1 ]
    do
        zone_name=`uci get firewall.@zone[$zone_index].name`
        zone_network=`uci get firewall.@zone[$zone_index].network`
        result=$(echo $zone_network | grep "${if_name}")
        
        if [ "$zone_name" = "wan" ];then
        {            
            if [ "$result" != "" -a  "$value" = "0" ]; then
                new_network=`echo $zone_network | sed "s/$if_name//g" `
            elif [ "$value" = "1" ]; then
                new_network=${zone_network}" "${if_name}
            fi           
           uci set firewall.@zone[$zone_index].network="$new_network"
           uci commit firewall                
        }
        elif [ "$zone_name" = "lan" ]; then
        {
            if [ "$result" != "" -a  "$value" = "1" ]; then
                new_network=`echo $zone_network | sed "s/$if_name//g" `
            elif [ "$value" = "0" ]; then
                new_network=${zone_network}" "${if_name}
            fi           
           uci set firewall.@zone[$zone_index].network="$new_network"
           uci commit firewall                
        }
        else
        {
            return 0
        }
        
        fi
        zone_index=$(($zone_index+1))
    done

    /etc/init.d/firewall restart &> /dev/null
    return 0   
}

wan_device_get_ipcx_addrtype()
{
    local wan_iface=$1
    local wan_addrtype=""
    wan_addrtype=$(uci get network.$wan_iface.proto) &> /dev/null
    if [ "$wan_addrtype" = "dhcp" ]; then
    {
           echo "DHCP"
    } 
    elif [ "$wan_addrtype" = "static" ]; then
    {
           echo "Static"
    }   
    else
        return $E_INVALID_PARAMETER_VALUE
    fi
}

wan_device_set_ipcx_addrtype()
{
    local wan_iface=$1
    local val=$2
    if [ "$val" = "DHCP" ]; then
    {
           uci set network.$wan_iface.proto="dhcp"
           uci commit network
    } 
    elif [ "$val" = "Static" ]; then
    {
           uci set network.$wan_iface.proto="static"
           uci commit network
    }   
    else
        return $E_INVALID_PARAMETER_VALUE
    fi
    return 0
}

wan_device_get_ipcx_subnetmask()
{
    local wan_iface=$1
    local wan_netmask=""
    wan_netmask=$(uci get network.$wan_iface.netmask) &> /dev/null
    echo $wan_netmask
}

wan_device_set_ipcx_subnetmask()
{
    local wan_iface=$1
    uci set network.$wan_iface.netmask=$2
    uci commit network
}

wan_device_get_ipcx_defaultgateway()
{
    local wan_iface=$1
    local wan_gateway=""
    wan_gateway=$(uci get network.$wan_iface.gateway) &> /dev/null
    echo $wan_gateway     
}

wan_device_set_ipcx_defaultgateway()
{
    local wan_iface=$1
    uci set network.$wan_iface.gateway=$2
    uci commit network
}
wan_device_get_ipcx_dnsenabled()
{
    echo "1"
}

wan_device_get_ipcx_dnsservers()
{
    local wan_iface=$1
    local wan_dnsservers=""
    wan_dnsservers=$(uci get network.$wan_iface.dns) &> /dev/null
    echo $wan_dnsservers       
}

wan_device_set_ipcx_dnsservers()
{
    local wan_iface=$1
    uci set network.$wan_iface.dns=$2
    uci commit network
}

wan_device_get_ipcx_macaddr() {
        local val iface="$1"
        local type
        val=$(uci get network.$iface.macaddr)
        if [ -z "$val" ]; then
            type=$(uci get network.$iface.type)
            if [ -z $type ];then
              iface=$(uci get network.$iface.ifname)
            else
            {
                [ $type = "bridge" ] &&
                {
                     iface=br-$iface
                }
            }
            fi
            [ -z $iface ] ||
            val=$(ifconfig $iface |grep HWaddr |awk '{print $5;}')
         fi

        echo $val	
}

wan_device_get_ponStatus()
{
    local ponstatus=`cat /proc/pon_status`
    if [ "$ponstatus" = "Los" ]; then
    {
        echo "NoSignal"
    } 
    elif [ "$val" = "Registering " ]; then
    {
        echo "EstablishingLink"
    }   
    
    elif [ "$val" = "Registered " -o "$val" = "Authened  " ]; then
    {
        echo "UP"
    }   
    
    elif [ "$val" = "Registered " ]; then
    {
        echo "Disabled"
    }   
    else
        echo "Error"
    fi     
}

wan_device_get_ponTXPower()
{
    local ponstatus=`cat /sys/devices/platform/pon/info/parameter  | grep TX |awk -F ":" '{print $2}' | sed s/[[:space:]]//g`
    echo $ponstatus
}

wan_device_get_ponRXPower()
{
    local ponstatus=`cat /sys/devices/platform/pon/info/parameter  | grep RX |awk -F ":" '{print $2}' | sed s/[[:space:]]//g`
    echo $ponstatus
}

wan_device_get_ponTransceiverTemperature()
{
    local ponstatus=`cat /sys/devices/platform/pon/info/parameter  | grep TCverTemperature |awk -F ":" '{print $2}' | sed s/[[:space:]]//g`
    echo $ponstatus
}

wan_device_get_ponSupplyVottage()
{
    local ponstatus=`cat /sys/devices/platform/pon/info/parameter  | grep SupplyVoltage |awk -F ":" '{print $2}' | sed s/[[:space:]]//g`
    echo $ponstatus
}

wan_device_get_ponBiasCurrent()
{
    local ponstatus=`cat /sys/devices/platform/pon/info/parameter  | grep BiasCurrent |awk -F ":" '{print $2}' | sed s/[[:space:]]//g`
    echo $ponstatus
}

wan_device_get_ponStatsBytesSent()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep GoodOctetsSent |awk '{print $2}'`
    echo $val
}

wan_device_get_ponStatsBytesReceived()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep GoodOctetsReceived |awk '{print $2}'`
    echo $val
}

wan_device_get_ponStatsSUnicastPackets()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep GoodFramesSent |awk '{print $2}'`
    echo $val
}

wan_device_get_ponStatsPacketsReceived()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep GoodFramesReceived |awk '{print $2}'`
    echo $val
}

wan_device_get_ponStatsPacketsSent()
{
    echo 0
}

wan_device_get_ponStatsPacketsReceived()
{
    echo 0
}


wan_device_get_ponStatsSMulticastPackets()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep MulticastFramesSent |awk '{print $2}'`
    echo $val
}

wan_device_get_ponStatsRMulticastPackets()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep MulticastFramesReceived |awk '{print $2}'`
    echo $val
}

wan_device_get_ponStatsSBroadcastPackets()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep BroadcastFramesSent |awk '{print $2}'`
    echo $val
}

wan_device_get_ponStatsRBroadcastPackets()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep BroadcastFramesReceived |awk '{print $2}'`
    echo $val
}

wan_device_get_ponStatsFECError()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep FECError |awk '{print $2}'`
    echo $val
}

wan_device_get_ponStatsHECError()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep HECError |awk '{print $2}'`
    echo $val
}

wan_device_get_ponStatsDropPacketst()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep DropPackets |awk '{print $2}'`
    echo $val
}

wan_device_get_ponStatsSPausePackets()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep SendPausePackets |awk '{print $2}'`
    echo $val
}

wan_device_get_ponStatsRPausePackets()
{
    local val=`cat /sys/devices/platform/pon/info/counter | grep ReceivedPausePackets |awk '{print $2}'`
    echo $val
}

wan_device_get_ethconfig_enable()
{
    local val=`uci get /etc/config/network.wan.disabled`
    if [ "$val" == "1" ]; then
        echo 0
    elif [ "$val" == "0" ]; then
        echo 1   
    else
         echo 1
    fi
}

wan_device_set_ethconfig_enable()
{
    if [ "$1" == "1" ]; then
        uci set /etc/config/network.wan.disabled=0
        uci commit network
        ifup wan
    elif [ "$1" == "0" ]; then
        uci set /etc/config/network.wan.disabled=1
        uci commit network
        ifdown wan
    else
        uci set /etc/config/network.wan.disabled=0
        uci commit network
        ifup wan
    fi
}

wan_device_get_ethconfig_status()
{
    local val=`uci get /etc/config/network.wan.disabled`
    if [ "$val" == "1" ]; then
        echo 0
    elif [ "$val" == "0" ]; then
        echo 1   
    else
         echo 1
    fi
}

wan_device_get_ethconfig_mac()
{
    local val=`ifconfig eth1.4093 | grep HWaddr | awk '{print $5}'`
    echo $val
}

wan_device_get_ethconfig_maxbitrate()
{
    local val="100"
    echo $val
}

wan_device_get_ethconfig_duplexmode()
{
    local val="Full"
    echo $val
}

wan_device_get_ethstats_bytessent()
{
    local tmp=`ifconfig eth1.4093 |grep "RX bytes"`
    local val=`echo ${tmp##*TX} |  awk -F ':' '{print $2}' | awk '{print $1}'`
    echo $val
}

wan_device_get_ethstats_bytesrecv()
{
    local tmp=`ifconfig eth1.4093 |grep "RX bytes"`
    local val=`echo ${tmp%TX*} |  awk -F ':' '{print $2}' | awk '{print $1}'`
    echo $val
}

wan_device_get_ethstats_packssent()
{
    local val=` ifconfig eth1.4093 | grep "TX packets" |awk '{print $2}' | awk -F ':' '{print $2}'`
    echo $val
}

wan_device_get_ethstats_packsrecv()
{
    local val=` ifconfig eth1.4093 | grep "RX packets" |awk '{print $2}' | awk -F ':' '{print $2}'`
    echo $val
}

wan_device_get_comconfig_enable()
{
    echo 1
}

wan_device_get_comconfig_accesstype()
{
     local val=`uci get /etc/config/upmode.global.mode`
     if [ "$val" == ""]; then
        echo "GPON"
     else
        echo "$val"
     fi        
}

wan_device_get_comconfig_uprate()
{
    echo "0"
}

wan_device_get_comconfig_downrate()
{
    echo "0"
}

wan_device_get_comconfig_phystatus()
{
    echo "UP"
}


wan_comconfig_data()
{
    local subwan_index=1
    local subwan_stats=0
    local subwan_total_stats=0
    local all_stats=0
    local wan_if=`uci get /etc/config/network.wan.ifname`
   echo "`date`: test = $1" > /tmp/123.txt
   local index=$1
   echo "`date`: index = $1" >> /tmp/123.txt

    local wan_stats=`cat /proc/net/dev | grep eth1.4093 | awk -F ":" '{print $2}' |awk '{print $i}' i="$index"`
   echo "`date`: wan_stats = $wan_stats" >> /tmp/123.txt

    while [ $subwan_index -le 8 ]   
    do                                                                          
        subwan_iface="subwan$subwan_index"         
        subwan_if=$(uci get network.$wan_iface.ifname) &> /dev/null
        [ -z $subwan_if ] &&
        {
             subwan_index=$(($subwan_index+1)) 
             continue
        }||
        {        
            subwan_stats=`cat /proc/net/dev | grep $subwan_if | awk  '{print $11}'`
            subwan_total_stats=$(($subwan_total_stats+$subwan_stats)) 
            subwan_index=$(($subwan_index+1)) 
        }    
    done
    all_stats=$(($subwan_total_stats+$wan_stats)) 
    echo "`date`: all_stats = $all_stats" >> /tmp/123.txt
    echo $all_stats
}

wan_device_get_comconfig_packetsent()
{
    local val=$(wan_comconfig_data 10)  
    echo $val
}

wan_device_get_comconfig_packetrecv()
{
    local val=$(wan_comconfig_data 2)  
    echo $val
}

wan_device_get_comconfig_bytesent()
{
    local val=$(wan_comconfig_data 9)  
    echo $val
}

wan_device_get_comconfig_bytesrecv()
{
    local val=$(wan_comconfig_data 1)  
    echo $val
}

wan_device_get_ethstatus()
{
    local wan_iface=$1
    wan_status=$(uci get -P /var/state/ network.$wan_iface.up) &> /dev/null
    if [ "$wan_status" = "1" ]; then
    {
        echo "UP"
    } 
    elif [ "$wan_status" = "0" ]; then
    {
        echo "Down"
    }   
    else
        echo "Down" 
    fi
}

wan_device_get_ethVLANID()
{
    local wan_iface=$1
    local if_name=$(uci get network.$wan_iface.ifname) &> /dev/null
    echo ${if_name##*.}
}

wan_device_set_ethVLANID()
{
    local wan_iface=$1
    local new_vid=$2
    local if_name=$(uci get network.$wan_iface.ifname) &> /dev/null
    if_name_left=${if_name%.*}
    if_name_new="$if_name_left"".""$new_vid"
    uci set network.$wan_iface.ifname="$if_name_new"
    uci commit network    
    ifdown $1
    ifup $1
}

wan_device_get_ethVLANMODE()
{
    local wan_iface=$1
    local vlanmode=""
    vlanmode=$(uci get network.$wan_iface.vlanmode) &> /dev/null
    if [ $vlanmode == "" ]; then
    {                  
         echo $vlanmode              
    }
    else
    {    
        echo "0"
    }
    fi
}

wan_device_set_ethVLANMODE()
{
    uci set network.$1.vlanmode="$2"
    uci commit network    
}

portmap_update_instance()
{
    local redirect="$1"
    local num=0
    local src=`$UCI_GET firewall.$redirect.src`
    if [ -n "$src" ]; then
        num=`echo $redirect | cut -d '[' -f2 |cut -d ']' -f1`
    fi
    echo $num > /tmp/test.txt
    echo $num
}

add_portmap_instances()
{
	local firewall=`uci add firewall redirect`
	uci set  firewall.$firewall.target="DNAT"
	uci set  firewall.$firewall.src="wan"
	uci set  firewall.$firewall.dest="lan"
	uci set  firewall.$firewall.proto="tcp udp"
	uci set  firewall.$firewall.src_dport="0"
	uci set  firewall.$firewall.dest_ip="192.168.1.1"
	uci set  firewall.$firewall.dest_port="0"
	uci set  firewall.$firewall.name="Forward$firewall"
	uci commit  firewall
        /etc/init.d/firewall restart &> /dev/null
	echo "1"
}

browse_portmap_instances()
{
    echo "`date`: browse_portmap_instances">/tmp/debug_portmap.txt

    local redirect redirects=`$UCI_SHOW firewall | grep "firewall\.@redirect\[.*\]=redirect" | awk -F'[.=]' '{print $2}'`
    echo "`date`: redirects=$redirects">>/tmp/debug_portmap.txt
    for redirect in $redirects; do
         echo "`date`: redirect=$redirect">>/tmp/debug_portmap.txt

    	local j=`portmap_update_instance $redirect`
    	sub_entry_portmap_instances  "$1" "$j" "$redirect"
    done
    return 0 
}

sub_entry_portmap_instances() {
	local j="$2"
	local redirect="$3"
        local wan_index=0    
        wan_index=`echo $1| cut -d '.' -f5`

	case_param "$1" belongto "$DMROOT.WANDevice.1.WANConnectionDevice.$wan_index.WANIPConnection.1.PortMapping.$j." && {
		common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$wan_index.WANIPConnection.1.PortMapping.$j." "1" "" "portmap_delete_instance $redirect"
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$wan_index.WANIPConnection.1.PortMapping.$j.PortMappingEnabled" "1" "wan_device_get_portmap_enable $redirect" "wan_device_set_portmap_enable $redirect" 
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$wan_index.WANIPConnection.1.PortMapping.$j.PortMappingLeaseDuration" "1" "wan_device_get_portmap_lease $redirect" "" 
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$wan_index.WANIPConnection.1.PortMapping.$j.RemoteHost" "1" "" "" 

		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$wan_index.WANIPConnection.1.PortMapping.$j.ExternalPort" "1" "wan_device_get_portmap_export $redirect" "wan_device_set_portmap_export $redirect" 
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$wan_index.WANIPConnection.1.PortMapping.$j.InternalPort" "1" "wan_device_get_portmap_inport $redirect" "wan_device_set_portmap_inport $redirect" 
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$wan_index.WANIPConnection.1.PortMapping.$j.InternalClient" "1" "wan_device_get_portmap_inclient $redirect" "wan_device_set_portmap_inclient $redirect" 
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$wan_index.WANIPConnection.1.PortMapping.$j.PortMappingProtocol" "1" "wan_device_get_portmap_proto $redirect" "wan_device_set_portmap_proto $redirect" 

		return 0
	}
	return $E_INVALID_PARAMETER_NAME;
}

portmap_delete_instance()
{
    uci delete firewall.$1
    uci commit firewall
    /etc/init.d/firewall restart &> /dev/null
    return 0    
}

wan_device_get_portmap_enable()
{
    local redirect=$1
    local enabled=$(uci get firewall.$redirect.enabled) &> /dev/null
    if [ "$enabled" == "0" ]; then
    {    
        echo "0"
    }
    else
        echo "1"
    fi
}

wan_device_set_portmap_enable()
{
    local redirect=$1
    local val=$2
    if [ "$val" == "1" ]; then
    {    
        uci delete firewall.$redirect.enabled
        uci commit firewall    
    }
    elif [ "$val" == "0" ]; then
    {
        uci set firewall.$redirect.enabled="0"
        uci commit firewall    
    }
    else
	return $E_INVALID_PARAMETER_VALUE;
    fi
    /etc/init.d/firewall restart &> /dev/null
    return 0
}

wan_device_get_portmap_lease()
 {
     echo 0
 }

wan_device_get_portmap_export()
{
    local val=""
    local redirect=$1
    val=$(uci get firewall.$redirect.src_dport) &> /dev/null
    if [ "$val" == "" ]; then
    {    
        echo "0"
    }
    else
        echo $val
    fi
}

wan_device_set_portmap_export()
{
    uci set firewall.$1.src_dport="$2"
    uci commit firewall
    return 0
}

wan_device_get_portmap_inport()
{
    local val=""
    local redirect=$1
    val=$(uci get firewall.$redirect.dest_port) &> /dev/null
    if [ "$val" == "" ]; then
    {    
        echo "0"
    }
    else
        echo $val
    fi
}

wan_device_set_portmap_inport()
{
    uci set firewall.$1.dest_port="$2"
    uci commit firewall
    return 0
}

wan_device_get_portmap_inclient()
{
    local val=""
    local redirect=$1
    val=$(uci get firewall.$redirect.dest_ip) &> /dev/null
    if [ "$val" == "" ]; then
    {    
        echo "0"
    }
    else
        echo $val
    fi
}

wan_device_set_portmap_inclient()
{
    uci set firewall.$1.dest_ip="$2"
    uci commit firewall
    return 0
}

wan_device_get_portmap_proto()
{
    local val=""
    local redirect="$1"
    val=$(uci get firewall.$redirect.proto) &> /dev/null
    if [ "$val" == "" ]; then
    {    
        echo "tcp udp"
    }
    else
        echo $val
    fi
}

wan_device_set_portmap_proto()
{
    uci set firewall.$1.proto="$2"
    uci commit firewall
    return 0
}

wan_device_get_ipcx_ethbytessend()
{
    local if_name=`uci get network.$1.ifname`
    local bytessend=0
    bytessend=`cat /proc/net/dev | grep $if_name | awk -F ":" '{print $2}' |awk '{print $9}' ` 
    if [ "$bytessend" == "" ]; then
    {    
        echo "0"
    }
    else
    {
        echo $bytessend
    }
    fi
}

wan_device_get_ipcx_ethbytesrecv()
{
    local if_name=`uci get network.$1.ifname`
    local bytesrecv=0
    bytesrecv=`cat /proc/net/dev | grep $if_name | awk -F ":" '{print $2}' |awk '{print $1}' ` 
    if [ "$bytesrecv" == "" ]; then
    {    
        echo "0"
    }
    else
    {
        echo $bytesrecv
    }
    fi
}
    
wan_device_get_ipcx_ethpacketssend()
{
    local packetssend=0
    local if_name=`uci get network.$1.ifname`
    packetssend=`cat /proc/net/dev | grep $if_name | awk -F ":" '{print $2}' |awk '{print $10}' ` 
    if [ "$packetsrecv" == "" ]; then
    {    
        echo "0"
    }
    else
    {
        echo $packetssend
    }
    fi
}

wan_device_get_ipcx_ethpacketsrecv()
{
    local packetsrecv=0
    local if_name=`uci get network.$1.ifname`
    packetsrecv=`cat /proc/net/dev | grep $if_name | awk -F ":" '{print $2}' |awk '{print $2}' ` 
    if [ "$packetsrecv" == "" ]; then
    {    
        echo "0"
    }
    else
    {
        echo $packetsrecv
    }
    fi
}

