#!/bin/sh
# Copyright (C) 2015 PIVA Software <www.pivasoftware.com>
# 	Author: MOHAMED Kallel <mohamed.kallel@pivasoftware.com>

. /lib//functions/network.sh

#############################
#   Entry point functuons   #
#############################

prefix_list="$prefix_list $DMROOT.WANDevice."
entry_execute_method_list="$entry_execute_method_list entry_execute_method_root_WANDevice"
entry_execute_method_list_forcedinform="$entry_execute_method_list_forcedinform entry_execute_method_root_WANDevice"


entry_execute_method_root_WANDevice() {
	case "$1" in ""|"$DMROOT."|"$DMROOT.WANDevice."*)
		common_execute_method_obj "$DMROOT.WANDevice." "0"
		common_execute_method_obj "$DMROOT.WANDevice.1." "0"
		common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice." "1" "wan_device_add_instances_wancxdev $1" "" "wan_device_browse_instances_wancxdev $1"
		return 0
		;;
	esac
	return $E_INVALID_PARAMETER_NAME;
}

sub_entry_wandevice_wanconnectiondevice() {
	local j="$2"
	local iface="$3"
	local protocol="$4"
	local default="$5"
	case_param "$1" belongto "$DMROOT.WANDevice.1.WANConnectionDevice.$j." && {
		common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j." "1"  "" "wan_device_del_instances_wancxdev $iface" 
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnectionNumberOfEntries" "0" "wan_device_get_WANIPConnectionNumberOfEntries $iface" "" " xsd:unsignedInt"
		common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANPPPConnectionNumberOfEntries" "0" "wan_device_get_WANPPPConnectionNumberOfEntries $iface" "" " xsd:unsignedInt"

		case $protocol in
			IP)
			common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection." "0"
			common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1." "0"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.Enable" "1" "wan_device_get_ipcx_enable $iface" "wan_device_set_ipcx_enable $iface"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.ConnectionStatus" "0" "wan_device_get_ipcx_status $iface"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.PossibleConnectionTypes" "0" "wan_device_get_ipcx_possible_contypes"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.ConnectionType" "1" "wan_device_get_ipcx_contypes $iface"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.Name" "1" "wan_device_get_ipcx_name $iface"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.RSIPAvailable" "0" "wan_device_get_ipcx_rsipavalilable"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.NATEnabled" "1" "wan_device_get_ipcx_natenable $iface"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.AddressingType" "1" "wan_device_get_ipcx_addrtype $iface" "wan_device_set_ipcx_addrtype $iface"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.ExternalIPAddress" "1" "wan_device_get_ipcx_ipaddr $iface" "wan_device_set_ipcx_ipaddr $iface" 
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.SubnetMask" "1" "wan_device_get_ipcx_subnetmask $iface" "wan_device_set_ipcx_subnetmask $iface" 
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.DefaultGateway" "1" "wan_device_get_ipcx_defaultgateway $iface" "wan_device_set_ipcx_defaultgateway $iface" 
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.DNSEnabled" "1" "wan_device_get_ipcx_dnsenabled" ""  
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.DNSServers" "1" "wan_device_get_ipcx_dnsservers $iface" ""  
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANIPConnection.1.MACAddress" "0" "wan_device_get_ipcx_macaddr $iface"

			;;
			PPP)
			common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANPPPConnection." "0"
			common_execute_method_obj "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANPPPConnection.1." "0"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANPPPConnection.1.Enable" "1" "wan_device_get_wan_ppp_enable $iface" "wan_device_set_wan_ppp_enable $iface" "xsd:boolean"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANPPPConnection.1.Username" "1" "$UCI_GET network.$iface.username" "wan_device_set_wan_ppp_cfg network.$iface.username"
			common_execute_method_param "$DMROOT.WANDevice.1.WANConnectionDevice.$j.WANPPPConnection.1.Password" "1" "$UCI_GET network.$iface.password" "wan_device_set_wan_ppp_cfg network.$iface.password"
			;;
		esac
		return 0
	}
	return $E_INVALID_PARAMETER_NAME;
}


wan_device_get_max_instances() {
wan_index=0
subwan_index=0
instances=0
local wan_iface=""
while [ $wan_index -le 2 ]
do
        if [ $wan_index = 0 ];then
          wan_iface="wan"
        else
           wan_iface="wan$wan_index"
        fi
        wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null

        if [ "$wan_proto" != "" ]; then
        {
             instances=$(($instances+1))
        }
        fi
        wan_index=$(($wan_index+1))
done

##subwan interface                     
while [ $subwan_index -le 7 ]   
do                                                                          
        if [ $subwan_index = 0 ];then                                         
          wan_iface="subwan"                                                
        else                                                                
           wan_iface="subwan$subwan_index"         
        fi                             
        wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null

        if [ "$wan_proto" != "" ]; then
        {                  
             instances=$(($instances+1))
        }      
        fi
        subwan_index=$(($subwan_index+1))
done      
    echo  ${instances:-0}
}

#######################################
#     Data model add  instances     #
#######################################

wan_device_add_instances_wancxdev() {
    local cur_instances=`wan_device_get_max_instances`
    local subwan_index_max=8
    subwan_index=0

    if [ $((++cur_instances))  -ge $subwan_index_max];then                                         
        exit 0
    fi                             

    ##subwan interface                     
    while [ $subwan_index -lt $subwan_index_max ]   
    do                                                                          
            if [ $subwan_index = 0 ];then                                         
              wan_iface="subwan"                                                
            else                                                                
               wan_iface="subwan$subwan_index"         
            fi                             
            wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null

            if [ "$wan_proto" == "" ]; then
            {                  
                ############ add subwan  #####################
                if [ $subwan_index = 0 ];then                                         
                     uci set network.subwan="interface"
                     uci set network.subwan.ifname="subwan"
                     uci set network.subwan.proto="dhcp"
                     uci set network.subwan.site="wan"
       		     uci commit network
                else                                                                
                     uci set network.$wan_iface="interface"
                     uci set network.$wan_iface.ifname="subwan$subwan_index"
                     uci set network.$wan_iface.proto="dhcp"
                     uci set network.$wan_iface.site="wan"
       		     uci commit network
                fi                             
                break
            }      
            fi
            subwan_index=$(($subwan_index+1))
    done

    if [ $((++cur_instances))  -lt $subwan_index_max];then                                         
        echo $((++cur_instances))              
    else                                                                
        echo $subwan_index_max
    fi                             
}

#######################################
#     Data model delete  instances     #
#######################################

wan_device_del_instances_wancxdev() {
	local iface="$1"
	uci delete network.$iface
	uci commit network
	return 0
}


#######################################
#     Data model browse instances     #
#######################################

wan_device_browse_instances_wancxdev() {
	local map maps=`wan_device_get_interface_maps` 
	for map in $maps; do
		local iface=${map%%:*}
		map=${map#*:}
		local j=${map%%:*}
		map=${map#*:}
		local protocol=${map%%:*}
		local default=${map#*:}
		sub_entry_wandevice_wanconnectiondevice "$1" "$j" "$iface" "$protocol" "$default"
	done
	return 0;
}

#######################################
#   Data model parameters functions   #
#######################################

wan_device_get_interface_maps() {
	#should return a list like this: "<interface1>:<instance1>:<protocol>:<default interface? 1 : 0> <interface2>:<instance>:<protocol>:<default interface? 1 : 0>"
wan_num=0
subwan_num=0
all_subwan=8
local wan_proto=""
local wanstring_last=""
local wanstring=""
local subwanstring_last=""
local subwanstring=""
local wan_iface=""
i=0
j=0
while [ $wan_num -le 2 ]
do

        if [ $wan_num = 0 ];then
          wan_iface="wan"
        else
          wan_iface="wan$wan_num"
        fi
        wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null
        [ -z $wan_proto ] &&
        {
             wan_num=$(($wan_num+1))
             continue
        }||
        {
                i=$(($i+1))
                [ "$wan_proto" = "pppoe" ] &&
                {
                        wan_proto="PPP"
                } || {
                wan_proto="IP"
                }

                wanstring=$(echo $wanstring_last $wan_iface:$i:$wan_proto:0)
                        wanstring_last=$wanstring
                wan_num=$(($wan_num+1))
         }
done
##subwan interface                     
while [ $subwan_num -le 7 ]   
do                                                                          
        if [ $subwan_num = 0 ];then                                         
          wan_iface="subwan"                                                
        else                                                                
           wan_iface="subwan$subwan_num"         
        fi                             
        wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null
        [ -z $wan_proto ] &&
        {                  
             subwan_num=$(($subwan_num+1))
	     all_subwan=$(($all_subwan-1))
             continue              
        }||                        
        {                               
                i=$(($i+1))             
                 [ "$wan_proto" = "pppoe" ] &&                    
                {                                                 
                        wan_proto="PPP"                           
                } || {                                            
                wan_proto="IP"            
                }                         
                                          
                 subwanstring=$(echo $wanstring $subwanstring_last $wan_iface:$i:$wan_proto:0)
                        subwanstring_last=$subwanstring
                subwan_num=$(($subwan_num+1)) 
        }                                     
done                                          
	if [ $all_subwan = "0" ];then
	 subwanstring=$wanstring
	fi
         echo $subwanstring            
}

wan_device_get_ipcx_status() {
        local val iface="$1"
        local up=$(uci -p /var/state get network.$iface.up)
	[ -z $up ] || 
	{
		[ $up = "1" ] && {
		echo "Connected"
		} || {
		echo "Disconnected"  
		}
	}
}

wan_device_get_ipcx_ipaddr() {
	local val iface="$1"
	
	network_get_ipaddr val $iface
	echo "$val"
}

wan_device_set_ipcx_ipaddr() {
    local wan_iface=$1
    uci set network.$wan_iface.ipaddr=$2
    uci commit network
}

wan_device_get_wan_ppp_enable() {
	local iface="$1"
	local val=`$UCI_GET network.$iface.auto`
	echo ${val:-1}
}

wan_device_set_wan_ppp_enable() {
        local iface="$1"
        local val="$2"
        local up
        local pid=$(ps www|grep pppd |grep $iface | awk '{print$1}')
        [ $val = "1" ] && {
	   $UCI_SET network.$iface.auto=1
          up=$(uci -p /var/state get network.$iface.up)
          if [ -z $up ];then
             /sbin/ifup $iface 2&>/dev/null
          elif [ $up = "0" ];then
                 /sbin/ifup $iface 2&>/dev/null
          fi
        } ||
        {
           /sbin/ifdown $iface 2&>/dev/null
	   $UCI_SET network.$iface.auto=0
        }

	return 0
}

wan_device_set_wan_ppp_cfg() {
	local cfg="$1"
	local val="$2"
	uci set $cfg=$val
	uci commit network
	return 0
}

wan_device_get_WANIPConnectionNumberOfEntries()
{
    local wan_iface=$1
    local wan_proto=""
    wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null
    [ "$wan_proto" = "pppoe" ] &&
    {
           echo 0
    } || {
           echo 1
    }
}

wan_device_get_WANPPPConnectionNumberOfEntries()
{
    local wan_iface=$1
    local wan_proto=""
    wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null
    [ "$wan_proto" = "pppoe" ] &&
    {
           echo 1
    } || {
           echo 0
    }
}

wan_device_get_ipcx_enable()
{
    local wan_iface=$1
    local wan_disabled=""
    wan_disabled=$(uci get network.$wan_iface.disabled) &> /dev/null
    if [ "$wan_disabled" = "1" ]; then
    {
           echo "0"
    } 
    elif [ "$wan_disabled" = "0" ]; then
    {
           echo "1"
    }   
    else
        return $E_INVALID_PARAMETER_VALUE
    fi
}

wan_device_set_ipcx_enable()
{
    local wan_iface=$1
    local val=$2
    if [ "$val" = "0" -o  "$val" = "false" ]; then
    {
           uci set network.$wan_iface.disabled="1"
           uci commit network
    } 
    elif [ "$val" = "1" -o "$val" = "true" ]; then
    {
           uci set network.$wan_iface.disabled="0"
           uci commit network
    }   
    else
        return $E_INVALID_PARAMETER_VALUE
    fi
    return 0
}

wan_device_get_ipcx_possible_contypes()
{
    echo "IP_Routed,IP_Bridged"
}
wan_device_get_ipcx_contypes()
{
    local wan_iface=$1
    local wan_proto=""
    wan_proto=$(uci get network.$wan_iface.proto) &> /dev/null
    [ "$wan_proto" = "relay" ] &&
    {
           echo "IP_Bridged"
    } || {
           echo "IP_Routed"
    }    
}

wan_device_get_ipcx_name()
{
    local wan_iface=$1
    local wan_ifname=""
    wan_ifname=$(uci get network.$wan_iface.ifname) &> /dev/null
    echo $wan_ifname
}

wan_device_get_ipcx_rsipavalilable()
{
    echo 0
}

wan_device_get_ipcx_natenable()
{
    echo 0
}

wan_device_get_ipcx_addrtype()
{
    local wan_iface=$1
    local wan_addrtype=""
    wan_addrtype=$(uci get network.$wan_iface.proto) &> /dev/null
    if [ "$wan_addrtype" = "dhcp" ]; then
    {
           echo "DHCP"
    } 
    elif [ "$wan_addrtype" = "static" ]; then
    {
           echo "Static"
    }   
    else
        return $E_INVALID_PARAMETER_VALUE
    fi
}

wan_device_set_ipcx_addrtype()
{
    local wan_iface=$1
    local val=$2
    if [ "$val" = "DHCP" ]; then
    {
           uci set network.$wan_iface.proto="dhcp"
           uci commit network
    } 
    elif [ "$val" = "Static" ]; then
    {
           uci set network.$wan_iface.proto="static"
           uci commit network
    }   
    else
        return $E_INVALID_PARAMETER_VALUE
    fi
    return 0
}

wan_device_get_ipcx_subnetmask()
{
    local wan_iface=$1
    local wan_netmask=""
    wan_netmask=$(uci get network.$wan_iface.netmask) &> /dev/null
    echo $wan_netmask
}

wan_device_set_ipcx_subnetmask()
{
    local wan_iface=$1
    uci set network.$wan_iface.netmask=$2
    uci commit network
}

wan_device_get_ipcx_defaultgateway()
{
    local wan_iface=$1
    local wan_gateway=""
    wan_gateway=$(uci get network.$wan_iface.gateway) &> /dev/null
    echo $wan_gateway     
}

wan_device_set_ipcx_defaultgateway()
{
    local wan_iface=$1
    uci set network.$wan_iface.gateway=$2
    uci commit network
}
wan_device_get_ipcx_dnsenabled()
{
    echo "1"
}

wan_device_get_ipcx_dnsservers()
{
    local wan_iface=$1
    local wan_dnsservers=""
    wan_dnsservers=$(uci get network.$wan_iface.dns) &> /dev/null
    echo $wan_dnsservers       
}

wan_device_set_ipcx_dnsservers()
{
    local wan_iface=$1
    uci set network.$wan_iface.dns=$2
    uci commit network
}

wan_device_get_ipcx_macaddr() {
        local val iface="$1"
        local type
        val=$(uci get network.$iface.macaddr)
        if [ -z "$val" ]; then
            type=$(uci get network.$iface.type)
            if [ -z $type ];then
              iface=$(uci get network.$iface.ifname)
            else
            {
                [ $type = "bridge" ] &&
                {
                     iface=br-$iface
                }
            }
            fi
            [ -z $iface ] ||
            val=$(ifconfig $iface |grep HWaddr |awk '{print $5;}')
         fi

        echo $val	
}

